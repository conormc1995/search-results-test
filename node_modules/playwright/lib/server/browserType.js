"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const util = require("util");
const browserContext_1 = require("../browserContext");
const browserServer_1 = require("./browserServer");
const browserPaths = require("../install/browserPaths");
const logger_1 = require("../logger");
const transport_1 = require("../transport");
const helper_1 = require("../helper");
const processLauncher_1 = require("./processLauncher");
const events_1 = require("../events");
const pipeTransport_1 = require("./pipeTransport");
const progress_1 = require("../progress");
const timeoutSettings_1 = require("../timeoutSettings");
function processBrowserArgOptions(options) {
    const { devtools = false, headless = !devtools } = options;
    return { devtools, headless };
}
exports.processBrowserArgOptions = processBrowserArgOptions;
const mkdirAsync = util.promisify(fs.mkdir);
const mkdtempAsync = util.promisify(fs.mkdtemp);
const DOWNLOADS_FOLDER = path.join(os.tmpdir(), 'playwright_downloads-');
class BrowserTypeBase {
    constructor(packagePath, browser, webSocketOrPipe) {
        this._name = browser.name;
        const browsersPath = browserPaths.browsersPath(packagePath);
        this._browserPath = browserPaths.browserDirectory(browsersPath, browser);
        this._executablePath = browserPaths.executablePath(this._browserPath, browser);
        this._webSocketNotPipe = webSocketOrPipe;
    }
    executablePath() {
        if (!this._executablePath)
            throw new Error('Browser is not supported on current platform');
        return this._executablePath;
    }
    name() {
        return this._name;
    }
    async launch(options = {}) {
        helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
        helper_1.assert(!options.port, 'Cannot specify a port without launching as a server.');
        const logger = new logger_1.RootLogger(options.logger);
        const browser = await progress_1.runAbortableTask(progress => this._innerLaunch(progress, options, logger, undefined), logger, timeoutSettings_1.TimeoutSettings.timeout(options));
        return browser;
    }
    async launchPersistentContext(userDataDir, options = {}) {
        helper_1.assert(!options.port, 'Cannot specify a port without launching as a server.');
        const persistent = browserContext_1.validateBrowserContextOptions(options);
        const logger = new logger_1.RootLogger(options.logger);
        const browser = await progress_1.runAbortableTask(progress => this._innerLaunch(progress, options, logger, persistent, userDataDir), logger, timeoutSettings_1.TimeoutSettings.timeout(options));
        return browser._defaultContext;
    }
    async _innerLaunch(progress, options, logger, persistent, userDataDir) {
        options.proxy = options.proxy ? browserContext_1.verifyProxySettings(options.proxy) : undefined;
        const { browserServer, downloadsPath, transport } = await this._launchServer(progress, options, !!persistent, logger, userDataDir);
        if (options.__testHookBeforeCreateBrowser)
            await options.__testHookBeforeCreateBrowser();
        const browserOptions = {
            slowMo: options.slowMo,
            persistent,
            headful: !processBrowserArgOptions(options).headless,
            logger,
            downloadsPath,
            ownedServer: browserServer,
            proxy: options.proxy,
        };
        copyTestHooks(options, browserOptions);
        const browser = await this._connectToTransport(transport, browserOptions);
        // We assume no control when using custom arguments, and do not prepare the default context in that case.
        const hasCustomArguments = !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs);
        if (persistent && !hasCustomArguments)
            await browser._defaultContext._loadDefaultContext();
        return browser;
    }
    async launchServer(options = {}) {
        helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launchServer`. Use `browserType.launchPersistentContext` instead');
        const { port = 0 } = options;
        const logger = new logger_1.RootLogger(options.logger);
        return progress_1.runAbortableTask(async (progress) => {
            const { browserServer, transport } = await this._launchServer(progress, options, false, logger);
            browserServer._webSocketWrapper = this._wrapTransportWithWebSocket(transport, logger, port);
            return browserServer;
        }, logger, timeoutSettings_1.TimeoutSettings.timeout(options));
    }
    async connect(options) {
        const logger = new logger_1.RootLogger(options.logger);
        return progress_1.runAbortableTask(async (progress) => {
            const transport = await transport_1.WebSocketTransport.connect(progress, options.wsEndpoint);
            progress.cleanupWhenAborted(() => transport.closeAndWait());
            if (options.__testHookBeforeCreateBrowser)
                await options.__testHookBeforeCreateBrowser();
            const browser = await this._connectToTransport(transport, { slowMo: options.slowMo, logger });
            return browser;
        }, logger, timeoutSettings_1.TimeoutSettings.timeout(options));
    }
    async _launchServer(progress, options, isPersistent, logger, userDataDir) {
        const { ignoreDefaultArgs = false, args = [], executablePath = null, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, } = options;
        const tempDirectories = [];
        let downloadsPath;
        if (options.downloadsPath) {
            downloadsPath = options.downloadsPath;
            await mkdirAsync(options.downloadsPath, { recursive: true });
        }
        else {
            downloadsPath = await mkdtempAsync(DOWNLOADS_FOLDER);
            tempDirectories.push(downloadsPath);
        }
        if (!userDataDir) {
            userDataDir = await mkdtempAsync(path.join(os.tmpdir(), `playwright_${this._name}dev_profile-`));
            tempDirectories.push(userDataDir);
        }
        const browserArguments = [];
        if (!ignoreDefaultArgs)
            browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir));
        else if (Array.isArray(ignoreDefaultArgs))
            browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir).filter(arg => ignoreDefaultArgs.indexOf(arg) === -1));
        else
            browserArguments.push(...args);
        const executable = executablePath || this.executablePath();
        if (!executable)
            throw new Error(`No executable path is specified. Pass "executablePath" option directly.`);
        // Note: it is important to define these variables before launchProcess, so that we don't get
        // "Cannot access 'browserServer' before initialization" if something went wrong.
        let transport = undefined;
        let browserServer = undefined;
        const { launchedProcess, gracefullyClose, kill } = await processLauncher_1.launchProcess({
            executablePath: executable,
            args: browserArguments,
            env: this._amendEnvironment(env, userDataDir, executable, browserArguments),
            handleSIGINT,
            handleSIGTERM,
            handleSIGHUP,
            progress,
            pipe: !this._webSocketNotPipe,
            tempDirectories,
            attemptToGracefullyClose: async () => {
                if (options.__testHookGracefullyClose)
                    await options.__testHookGracefullyClose();
                // We try to gracefully close to prevent crash reporting and core dumps.
                // Note that it's fine to reuse the pipe transport, since
                // our connection ignores kBrowserCloseMessageId.
                this._attemptToGracefullyCloseBrowser(transport);
            },
            onExit: (exitCode, signal) => {
                if (browserServer)
                    browserServer.emit(events_1.Events.BrowserServer.Close, exitCode, signal);
            },
        });
        browserServer = new browserServer_1.BrowserServer(launchedProcess, gracefullyClose, kill);
        progress.cleanupWhenAborted(() => browserServer && browserServer._closeOrKill(progress.timeUntilDeadline()));
        if (this._webSocketNotPipe) {
            const match = await processLauncher_1.waitForLine(progress, launchedProcess, this._webSocketNotPipe.stream === 'stdout' ? launchedProcess.stdout : launchedProcess.stderr, this._webSocketNotPipe.webSocketRegex);
            const innerEndpoint = match[1];
            transport = await transport_1.WebSocketTransport.connect(progress, innerEndpoint);
        }
        else {
            const stdio = launchedProcess.stdio;
            transport = new pipeTransport_1.PipeTransport(stdio[3], stdio[4], logger);
        }
        return { browserServer, downloadsPath, transport };
    }
}
exports.BrowserTypeBase = BrowserTypeBase;
function copyTestHooks(from, to) {
    for (const [key, value] of Object.entries(from)) {
        if (key.startsWith('__testHook'))
            to[key] = value;
    }
}
//# sourceMappingURL=browserType.js.map