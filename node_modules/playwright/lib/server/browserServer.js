"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
class WebSocketWrapper {
    constructor(wsEndpoint, bindings) {
        this.wsEndpoint = wsEndpoint;
        this._bindings = bindings;
    }
    async checkLeaks() {
        let counter = 0;
        return new Promise((fulfill, reject) => {
            const check = () => {
                const filtered = this._bindings.filter(entry => entry.size);
                if (!filtered.length) {
                    fulfill();
                    return;
                }
                if (++counter >= 50) {
                    reject(new Error('Web socket leak ' + filtered.map(entry => [...entry.keys()].join(':')).join('|')));
                    return;
                }
                setTimeout(check, 100);
            };
            check();
        });
    }
}
exports.WebSocketWrapper = WebSocketWrapper;
class BrowserServer extends events_1.EventEmitter {
    constructor(process, gracefullyClose, kill) {
        super();
        this._webSocketWrapper = null;
        this._process = process;
        this._gracefullyClose = gracefullyClose;
        this._kill = kill;
    }
    process() {
        return this._process;
    }
    wsEndpoint() {
        return this._webSocketWrapper ? this._webSocketWrapper.wsEndpoint : '';
    }
    async kill() {
        await this._kill();
    }
    async close() {
        await this._gracefullyClose();
    }
    async _checkLeaks() {
        if (this._webSocketWrapper)
            await this._webSocketWrapper.checkLeaks();
    }
    async _closeOrKill(timeout) {
        let timer;
        try {
            await Promise.race([
                this.close(),
                new Promise((resolve, reject) => timer = setTimeout(reject, timeout)),
            ]);
        }
        catch (ignored) {
            await this.kill().catch(ignored => { }); // Make sure to await actual process exit.
        }
        finally {
            clearTimeout(timer);
        }
    }
}
exports.BrowserServer = BrowserServer;
//# sourceMappingURL=browserServer.js.map