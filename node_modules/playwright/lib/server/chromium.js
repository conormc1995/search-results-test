"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const helper_1 = require("../helper");
const crBrowser_1 = require("../chromium/crBrowser");
const ws = require("ws");
const crConnection_1 = require("../chromium/crConnection");
const browserType_1 = require("./browserType");
const browserServer_1 = require("./browserServer");
const logger_1 = require("../logger");
const crDevTools_1 = require("../debug/crDevTools");
const debugSupport = require("../debug/debugSupport");
class Chromium extends browserType_1.BrowserTypeBase {
    constructor(packagePath, browser) {
        const debugPortStr = helper_1.getFromENV('PLAYWRIGHT_CHROMIUM_DEBUG_PORT');
        const debugPort = debugPortStr ? +debugPortStr : undefined;
        if (debugPort !== undefined) {
            if (Number.isNaN(debugPort))
                throw new Error(`PLAYWRIGHT_CHROMIUM_DEBUG_PORT must be a number, but is set to "${debugPortStr}"`);
            helper_1.logPolitely(`NOTE: Chromium will be launched in debug mode on port ${debugPort}`);
        }
        super(packagePath, browser, debugPort ? { webSocketRegex: /^DevTools listening on (ws:\/\/.*)$/, stream: 'stderr' } : null);
        this._debugPort = debugPort;
        if (debugSupport.isDebugMode())
            this._devtools = this._createDevTools();
    }
    _createDevTools() {
        return new crDevTools_1.CRDevTools(path.join(this._browserPath, 'devtools-preferences.json'));
    }
    async _connectToTransport(transport, options) {
        let devtools = this._devtools;
        if (options.__testHookForDevTools) {
            devtools = this._createDevTools();
            await options.__testHookForDevTools(devtools);
        }
        return crBrowser_1.CRBrowser.connect(transport, options, devtools);
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
        const runningAsRoot = process.geteuid && process.geteuid() === 0;
        helper_1.assert(!runningAsRoot || browserArguments.includes('--no-sandbox'), 'Cannot launch Chromium as root without --no-sandbox. See https://crbug.com/638180.');
        return env;
    }
    _attemptToGracefullyCloseBrowser(transport) {
        const message = { method: 'Browser.close', id: crConnection_1.kBrowserCloseMessageId, params: {} };
        transport.send(message);
    }
    _wrapTransportWithWebSocket(transport, logger, port) {
        return wrapTransportWithWebSocket(transport, logger, port);
    }
    _defaultArgs(options, isPersistent, userDataDir) {
        const { devtools, headless } = browserType_1.processBrowserArgOptions(options);
        const { args = [], proxy } = options;
        const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir'));
        if (userDataDirArg)
            throw new Error('Pass userDataDir parameter instead of specifying --user-data-dir argument');
        if (args.find(arg => arg.startsWith('--remote-debugging-pipe')))
            throw new Error('Playwright manages remote debugging connection itself.');
        if (args.find(arg => !arg.startsWith('-')))
            throw new Error('Arguments can not specify page to be opened');
        const chromeArguments = [...DEFAULT_ARGS];
        chromeArguments.push(`--user-data-dir=${userDataDir}`);
        if (this._debugPort !== undefined)
            chromeArguments.push('--remote-debugging-port=' + this._debugPort);
        else
            chromeArguments.push('--remote-debugging-pipe');
        if (devtools)
            chromeArguments.push('--auto-open-devtools-for-tabs');
        if (headless) {
            chromeArguments.push('--headless', '--hide-scrollbars', '--mute-audio');
        }
        if (proxy) {
            const proxyURL = new URL(proxy.server);
            const isSocks = proxyURL.protocol === 'socks5:';
            // https://www.chromium.org/developers/design-documents/network-settings
            if (isSocks) {
                // https://www.chromium.org/developers/design-documents/network-stack/socks-proxy
                chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
            }
            chromeArguments.push(`--proxy-server=${proxy.server}`);
            if (proxy.bypass) {
                const patterns = proxy.bypass.split(',').map(t => t.trim()).map(t => t.startsWith('.') ? '*' + t : t);
                chromeArguments.push(`--proxy-bypass-list=${patterns.join(';')}`);
            }
        }
        chromeArguments.push(...args);
        if (isPersistent)
            chromeArguments.push('about:blank');
        else
            chromeArguments.push('--no-startup-window');
        return chromeArguments;
    }
}
exports.Chromium = Chromium;
function wrapTransportWithWebSocket(transport, logger, port) {
    const server = new ws.Server({ port });
    const guid = helper_1.helper.guid();
    const awaitingBrowserTarget = new Map();
    const sessionToData = new Map();
    const socketToBrowserSession = new Map();
    let lastSequenceNumber = 1;
    function addSession(sessionId, socket, parentSessionId) {
        sessionToData.set(sessionId, {
            socket,
            children: new Set(),
            isBrowserSession: !parentSessionId,
            parent: parentSessionId
        });
        if (parentSessionId)
            sessionToData.get(parentSessionId).children.add(sessionId);
    }
    function removeSession(sessionId) {
        const data = sessionToData.get(sessionId);
        for (const child of data.children)
            removeSession(child);
        if (data.parent)
            sessionToData.get(data.parent).children.delete(sessionId);
        sessionToData.delete(sessionId);
    }
    transport.onmessage = message => {
        if (typeof message.id === 'number' && awaitingBrowserTarget.has(message.id)) {
            const freshSocket = awaitingBrowserTarget.get(message.id);
            awaitingBrowserTarget.delete(message.id);
            const sessionId = message.result.sessionId;
            if (freshSocket.readyState !== ws.CLOSED && freshSocket.readyState !== ws.CLOSING) {
                const { queue } = socketToBrowserSession.get(freshSocket);
                for (const item of queue) {
                    item.sessionId = sessionId;
                    transport.send(item);
                }
                socketToBrowserSession.set(freshSocket, { sessionId });
                addSession(sessionId, freshSocket);
            }
            else {
                transport.send({
                    id: ++lastSequenceNumber,
                    method: 'Target.detachFromTarget',
                    params: { sessionId }
                });
                socketToBrowserSession.delete(freshSocket);
            }
            return;
        }
        // At this point everything we care about has sessionId.
        if (!message.sessionId)
            return;
        const data = sessionToData.get(message.sessionId);
        if (data && data.socket.readyState !== ws.CLOSING) {
            if (message.method === 'Target.attachedToTarget')
                addSession(message.params.sessionId, data.socket, message.sessionId);
            if (message.method === 'Target.detachedFromTarget')
                removeSession(message.params.sessionId);
            // Strip session ids from the browser sessions.
            if (data.isBrowserSession)
                delete message.sessionId;
            data.socket.send(JSON.stringify(message));
        }
    };
    transport.onclose = () => {
        for (const socket of socketToBrowserSession.keys()) {
            socket.removeListener('close', socket.__closeListener);
            socket.close(undefined, 'Browser disconnected');
        }
        server.close();
        transport.onmessage = undefined;
        transport.onclose = undefined;
    };
    server.on('connection', (socket, req) => {
        if (req.url !== '/' + guid) {
            socket.close();
            return;
        }
        socketToBrowserSession.set(socket, { queue: [] });
        transport.send({
            id: ++lastSequenceNumber,
            method: 'Target.attachToBrowserTarget',
            params: {}
        });
        awaitingBrowserTarget.set(lastSequenceNumber, socket);
        socket.on('message', (message) => {
            const parsedMessage = JSON.parse(Buffer.from(message).toString());
            // If message has sessionId, pass through.
            if (parsedMessage.sessionId) {
                transport.send(parsedMessage);
                return;
            }
            // If message has no sessionId, look it up.
            const session = socketToBrowserSession.get(socket);
            if (session.sessionId) {
                // We have it, use it.
                parsedMessage.sessionId = session.sessionId;
                transport.send(parsedMessage);
                return;
            }
            // Pending session id, queue the message.
            session.queue.push(parsedMessage);
        });
        socket.on('error', logger_1.logError(logger));
        socket.on('close', socket.__closeListener = () => {
            const session = socketToBrowserSession.get(socket);
            if (!session || !session.sessionId)
                return;
            removeSession(session.sessionId);
            socketToBrowserSession.delete(socket);
            transport.send({
                id: ++lastSequenceNumber,
                method: 'Target.detachFromTarget',
                params: { sessionId: session.sessionId }
            });
        });
    });
    const address = server.address();
    const wsEndpoint = typeof address === 'string' ? `${address}/${guid}` : `ws://127.0.0.1:${address.port}/${guid}`;
    return new browserServer_1.WebSocketWrapper(wsEndpoint, [awaitingBrowserTarget, sessionToData, socketToBrowserSession]);
}
const DEFAULT_ARGS = [
    '--disable-background-networking',
    '--enable-features=NetworkService,NetworkServiceInProcess',
    '--disable-background-timer-throttling',
    '--disable-backgrounding-occluded-windows',
    '--disable-breakpad',
    '--disable-client-side-phishing-detection',
    '--disable-component-extensions-with-background-pages',
    '--disable-default-apps',
    '--disable-dev-shm-usage',
    '--disable-extensions',
    // BlinkGenPropertyTrees disabled due to crbug.com/937609
    '--disable-features=TranslateUI,BlinkGenPropertyTrees,ImprovedCookieControls,SameSiteByDefaultCookies',
    '--disable-hang-monitor',
    '--disable-ipc-flooding-protection',
    '--disable-popup-blocking',
    '--disable-prompt-on-repost',
    '--disable-renderer-backgrounding',
    '--disable-sync',
    '--force-color-profile=srgb',
    '--metrics-recording-only',
    '--no-first-run',
    '--enable-automation',
    '--password-store=basic',
    '--use-mock-keychain',
];
//# sourceMappingURL=chromium.js.map