"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const helper_1 = require("./helper");
const progress_1 = require("./progress");
class ExtendedEventEmitter extends events_1.EventEmitter {
    _abortPromiseForEvent(event) {
        return new Promise(() => void 0);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
        const options = typeof optionsOrPredicate === 'function' ? { predicate: optionsOrPredicate } : optionsOrPredicate;
        const { predicate = () => true } = options;
        const progressController = new progress_1.ProgressController(this._getLogger(), this._getTimeoutSettings().timeout(options));
        this._abortPromiseForEvent(event).then(error => progressController.abort(error));
        return progressController.run(async (progress) => {
            const listeners = [];
            const promise = new Promise((resolve, reject) => {
                listeners.push(helper_1.helper.addEventListener(this, event, eventArg => {
                    try {
                        if (!predicate(eventArg))
                            return;
                        resolve(eventArg);
                    }
                    catch (e) {
                        reject(e);
                    }
                }));
            });
            progress.cleanupWhenAborted(() => helper_1.helper.removeEventListeners(listeners));
            const result = await promise;
            helper_1.helper.removeEventListeners(listeners);
            return result;
        });
    }
}
exports.ExtendedEventEmitter = ExtendedEventEmitter;
//# sourceMappingURL=extendedEventEmitter.js.map