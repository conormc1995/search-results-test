"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sourceMap = require("./sourceMap");
const helper_1 = require("../helper");
const events_1 = require("../events");
const selectors_1 = require("../selectors");
let debugMode;
function isDebugMode() {
    if (debugMode === undefined)
        debugMode = !!helper_1.getFromENV('PLAYWRIGHT_DEBUG_UI');
    return debugMode;
}
exports.isDebugMode = isDebugMode;
let sourceUrlCounter = 0;
const playwrightSourceUrlPrefix = '__playwright_evaluation_script__';
const sourceUrlRegex = /^[\040\t]*\/\/[@#] sourceURL=\s*(\S*?)\s*$/m;
function generateSourceUrl() {
    return `\n//# sourceURL=${playwrightSourceUrlPrefix}${sourceUrlCounter++}\n`;
}
exports.generateSourceUrl = generateSourceUrl;
function isPlaywrightSourceUrl(s) {
    return s.startsWith(playwrightSourceUrlPrefix);
}
exports.isPlaywrightSourceUrl = isPlaywrightSourceUrl;
function ensureSourceUrl(expression) {
    return sourceUrlRegex.test(expression) ? expression : expression + generateSourceUrl();
}
exports.ensureSourceUrl = ensureSourceUrl;
async function generateSourceMapUrl(functionText, generatedText) {
    if (!isDebugMode())
        return generateSourceUrl();
    const sourceMapUrl = await sourceMap.generateSourceMapUrl(functionText, generatedText);
    return sourceMapUrl || generateSourceUrl();
}
exports.generateSourceMapUrl = generateSourceMapUrl;
async function installConsoleHelpers(context) {
    if (!isDebugMode())
        return;
    const installInFrame = async (frame) => {
        try {
            const mainContext = await frame._mainContext();
            const injectedScript = await mainContext.injectedScript();
            await injectedScript.evaluate(installPlaywrightObjectOnWindow, selectors_1.parseSelector.toString());
        }
        catch (e) {
        }
    };
    context.on(events_1.Events.BrowserContext.Page, (page) => {
        installInFrame(page.mainFrame());
        page.on(events_1.Events.Page.FrameNavigated, installInFrame);
    });
}
exports.installConsoleHelpers = installConsoleHelpers;
function installPlaywrightObjectOnWindow(injectedScript, parseSelectorFunctionString) {
    const parseSelector = new Function('...args', 'return (' + parseSelectorFunctionString + ')(...args)');
    const highlightContainer = document.createElement('div');
    highlightContainer.style.cssText = 'position: absolute; left: 0; top: 0; pointer-events: none; overflow: visible; z-index: 10000;';
    function checkSelector(parsed) {
        for (const { name } of parsed.parts) {
            if (!injectedScript.engines.has(name))
                throw new Error(`Unknown engine "${name}"`);
        }
    }
    function highlightElements(elements = [], target) {
        const scrollLeft = document.scrollingElement ? document.scrollingElement.scrollLeft : 0;
        const scrollTop = document.scrollingElement ? document.scrollingElement.scrollTop : 0;
        highlightContainer.textContent = '';
        for (const element of elements) {
            const rect = element.getBoundingClientRect();
            const highlight = document.createElement('div');
            highlight.style.position = 'absolute';
            highlight.style.left = (rect.left + scrollLeft) + 'px';
            highlight.style.top = (rect.top + scrollTop) + 'px';
            highlight.style.height = rect.height + 'px';
            highlight.style.width = rect.width + 'px';
            highlight.style.pointerEvents = 'none';
            if (element === target) {
                highlight.style.background = 'hsla(30, 97%, 37%, 0.3)';
                highlight.style.border = '3px solid hsla(30, 97%, 37%, 0.6)';
            }
            else {
                highlight.style.background = 'hsla(120, 100%, 37%, 0.3)';
                highlight.style.border = '3px solid hsla(120, 100%, 37%, 0.8)';
            }
            highlight.style.borderRadius = '3px';
            highlightContainer.appendChild(highlight);
        }
        document.body.appendChild(highlightContainer);
    }
    function $(selector) {
        if (typeof selector !== 'string')
            throw new Error(`Usage: playwright.query('Playwright >> selector').`);
        const parsed = parseSelector(selector);
        checkSelector(parsed);
        const elements = injectedScript.querySelectorAll(parsed, document);
        highlightElements(elements, elements[0]);
        return elements[0];
    }
    function $$(selector) {
        if (typeof selector !== 'string')
            throw new Error(`Usage: playwright.$$('Playwright >> selector').`);
        const parsed = parseSelector(selector);
        checkSelector(parsed);
        const elements = injectedScript.querySelectorAll(parsed, document);
        highlightElements(elements);
        return elements;
    }
    function inspect(selector) {
        if (typeof window.inspect !== 'function')
            return;
        if (typeof selector !== 'string')
            throw new Error(`Usage: playwright.inspect('Playwright >> selector').`);
        highlightElements();
        window.inspect($(selector));
    }
    function clear() {
        highlightContainer.remove();
    }
    window.playwright = { $, $$, inspect, clear };
}
//# sourceMappingURL=debugSupport.js.map